package main

import (
	"flag"
	"log"
	"os"
	"text/template"
	"time"

	"github.com/pdt256/talks/code/cqrs/go/bank/pkg/parser"
)

func main() {
	fileName := flag.String("file", "", "filename containing events")
	flag.Parse()

	file, err := os.Open(*fileName)
	if err != nil {
		log.Fatalf("unable to open (%s): %v", *fileName, err)
	}

	eventNames, err := parser.GetStructNames(file)
	if err != nil {
		log.Fatalf("unable to extract events: %v", err)
	}

	writeEventBinder(eventNames, "bind_events.go")
}

func writeEventBinder(eventNames []string, outputFilePath string) {
	file, err := os.Create(outputFilePath)
	if err != nil {
		log.Fatalf("unable to create events file: %v", err)
	}
	defer file.Close()

	err = fileTemplate.Execute(file, templateData{
		Timestamp:  time.Now(),
		EventNames: eventNames,
	})
	if err != nil {
		log.Fatalf("unable to write to events file: %v", err)
	}
}

type templateData struct {
	Timestamp  time.Time
	EventNames []string
}

var fileTemplate = template.Must(template.New("").Parse(`// Code generated by go generate
// This file was generated at:
// {{ .Timestamp }}
package bank

import "github.com/pdt256/talks/code/cqrs/go/bank/pkg/event"

func BindEvents(serializer event.Serializer) {
	serializer.Bind({{ range .EventNames }}
		{{ . }}{},{{ end }}
	)
}
`))
